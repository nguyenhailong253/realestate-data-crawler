# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

orbs:
  python: circleci/python@2.1.1
  aws-ecr: circleci/aws-ecr@8.1.3
  # aws-cli: circleci/aws-cli@3.1.3

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  unit-test:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    executor: python/default
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout
      - python/install-packages:
          args: pytest
          pkg-manager: pipenv
      - run:
          name: "Running unit tests..."
          # https://stackoverflow.com/questions/10253826/path-issue-with-pytest-importerror-no-module-named-yadayadayada
          command: "pipenv run python -m pytest ./tests/ -s"
  build-img:
    docker:
      - image: cimg/python:3.11.0
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.18
      - aws-ecr/build-and-push-image:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-cli-version: latest
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          create-repo: true
          dockerfile: Dockerfile
          path: .
          region: "${AWS_REGION}"
          repo: $AWS_ECR_REPO
          registry-id: AWS_ECR_REGISTRY_ID
          extra-build-args: "--platform linux/amd64 --build-arg DB_USERNAME=$DB_USERNAME --build-arg DB_PASSWORD=$DB_PASSWORD --build-arg DB_HOST=$DB_HOST --build-arg DB_PORT=$DB_PORT --build-arg DB_NAME=$DB_NAME --build-arg DB_SCHEMA=$DB_SCHEMA"
  crawl-data-tas:
    machine:
      image: ubuntu-2204:2022.04.2 # this one has docker cli pre-installed
    steps:
      # - setup_remote_docker:
      #     version: 20.10.18
      - aws-ecr/ecr-login:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          region: "${AWS_REGION}"
      - run:
          name: "Pulling images..."
          command: |
            docker pull $AWS_ECR_REPO_URI
      - run:
          name: "Crawling all property listings in Tasmania"
          command: docker run $AWS_ECR_REPO_URI tas

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  build-crawler-image:
    jobs:
      # - unit-test
      - build-img
      #     filters:
      #       branches:
      #         only:
      #           - master
      - crawl-data-tas:
          requires:
            # - unit-test
            - build-img
          filters:
            branches:
              only:
                - master
